name: ecs-deploy

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up AWS credentials
        run: |
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t my-app .

      - name: Tag Docker image
        run: |
          echo "ECR Registry: ${{ secrets.AWS_ECR_REGISTRY }}"
          docker tag my-app:latest 317327656978.dkr.ecr.us-east-1.amazonaws.com/ecs-ecr-repo:latest
      
      - name: Push Docker image to Amazon ECR
        run: |
          echo "ECR Registry: ${{ secrets.AWS_ECR_REGISTRY }}"
          docker push 317327656978.dkr.ecr.us-east-1.amazonaws.com/ecs-ecr-repo:latest

      - name: Register task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-def.json
      
      - name: Create ECS service
        id: register-task-definition
        run: |
          TASK_DEFINITION=$(aws ecs register-task-definition --cli-input-json file://task-def.json | jq -r .taskDefinition.taskDefinitionArn)
          aws ecs create-service --cluster TestCluster --service-name s3-service --task-definition $TASK_DEFINITION --launch-type FARGATE --desired-count 1 --network-configuration "awsvpcConfiguration={subnets=[subnet-d9a085f8],securityGroups=[sg-a06034bc],assignPublicIp=ENABLED}"